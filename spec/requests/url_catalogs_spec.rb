 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/url_catalogs", type: :request do

  # UrlCatalog. As you add validations to UrlCatalog, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
     { url: 'http://valid.com', url_hash: '1a1a1a1' }
  }

  let(:invalid_attributes) {
    { url: 'invalid_url', url_hash: '1a1a1a1' }
  }

  describe "GET /index" do
    it "renders a successful response" do
      UrlCatalog.create! valid_attributes
      get url_catalogs_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      url_catalog = UrlCatalog.create! valid_attributes
      get url_catalog_url(url_catalog)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_url_catalog_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      url_catalog = UrlCatalog.create! valid_attributes
      get edit_url_catalog_url(url_catalog)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new UrlCatalog" do
        expect {
          post url_catalogs_url, params: { url_catalog: valid_attributes }
        }.to change(UrlCatalog, :count).by(1)
      end

      it "redirects to the created url_catalog" do
        post url_catalogs_url, params: { url_catalog: valid_attributes }
        expect(response).to redirect_to(url_catalog_url(UrlCatalog.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new UrlCatalog" do
        expect {
          post url_catalogs_url, params: { url_catalog: invalid_attributes }
        }.to change(UrlCatalog, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post url_catalogs_url, params: { url_catalog: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { url: "http://newurl.com"}
      }

      it "updates the requested url_catalog" do
        url_catalog = UrlCatalog.create! valid_attributes
        patch url_catalog_url(url_catalog), params: { url_catalog: new_attributes }
        url_catalog.reload
        expect(url_catalog.url).to eq("http://newurl.com")
      end

      it "redirects to the url_catalog" do
        url_catalog = UrlCatalog.create! valid_attributes
        patch url_catalog_url(url_catalog), params: { url_catalog: new_attributes }
        url_catalog.reload
        expect(response).to redirect_to(url_catalog_url(url_catalog))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        url_catalog = UrlCatalog.create! valid_attributes
        patch url_catalog_url(url_catalog), params: { url_catalog: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested url_catalog" do
      url_catalog = UrlCatalog.create! valid_attributes
      expect {
        delete url_catalog_url(url_catalog)
      }.to change(UrlCatalog, :count).by(-1)
    end

    it "redirects to the url_catalogs list" do
      url_catalog = UrlCatalog.create! valid_attributes
      delete url_catalog_url(url_catalog)
      expect(response).to redirect_to(url_catalogs_url)
    end
  end
end
